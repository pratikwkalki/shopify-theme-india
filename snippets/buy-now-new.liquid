<button type="button" class="shopify-payment-button__button shopify-payment-button__button--unbranded" data-buy-now>
  Buy it now
</button>
<button type="button" class="shopify-payment-button__button shopify-payment-button__button--unbranded" data-buy-now-done>
  Done
</button>
<script>
  if (window.innerWidth > 767) {
    document.querySelector('[data-buy-now]').addEventListener('click', () => {
      const addToCartForm = document.querySelector('form[action$="/cart/add"]');
      if (!addToCartForm) return;
    
      if (addToCartForm.checkValidity()) {
        const refTimeStamp = Date.now();
        const upsellProducts = addToCartForm.querySelectorAll('[js-upsell-product] input:checked');
    
        if (upsellProducts.length > 0) {
          // 🟢 Add upsell products first
          const upsellFormData = new FormData();
          upsellProducts.forEach((elm, index) => {
            const id = elm.dataset.productId;
            if (id) {
              upsellFormData.append(`items[${index}][id]`, Number(id));
              upsellFormData.append(`items[${index}][quantity]`, 1);
              upsellFormData.append(`items[${index}][properties][_ref_id]`, refTimeStamp);
            }
          });
    
          fetch(window.Shopify.routes.root + 'cart/add.js', {
            method: 'POST',
            body: upsellFormData
          })
            .then((res) => res.json())
            .then(() => {
              // 🟢 Add main product after upsells
              setTimeout(() => {
                const mainFormData = new FormData(addToCartForm);
                mainFormData.append('items[0][properties][_ref_id]', refTimeStamp);
    
                fetch(window.Shopify.routes.root + 'cart/add.js', {
                  method: 'POST',
                  body: mainFormData
                })
                  .then((res) => res.json())
                  .then(() => {
                    window.location.href = '/checkout';
                  })
                  .catch((e) => console.error('❌ Error adding main product:', e));
              }, 300);
            })
            .catch((e) => console.error('❌ Error adding upsells:', e));
        } else {
          // 🔵 No upsells, add main product directly
          const mainFormData = new FormData(addToCartForm);
          fetch(window.Shopify.routes.root + 'cart/add.js', {
            method: 'POST',
            body: mainFormData
          })
            .then((res) => res.json())
            .then(() => {
              window.location.href = '/checkout';
            })
            .catch((e) => console.error('❌ Error adding main product:', e));
        }
      } else {
        addToCartForm.reportValidity();
      }
    });
  }
  
  const observeAllSubmitButtons = () => {
    const productSubmitButtons = document.querySelectorAll('.product-custom .product_details .button');
    
    if (productSubmitButtons.length === 0) return;
  
    productSubmitButtons.forEach((submitButton) => {
      const buyNowButton = submitButton.closest('.product-form')?.querySelector('.shopify-payment-button__button');
      
      if (!buyNowButton) return;
  
      // Initial check for the state of the button on page load
      if (submitButton.disabled || submitButton.classList.contains('disabled')) {
        buyNowButton.setAttribute('disabled', 'disabled');
      } else {
        buyNowButton.removeAttribute('disabled');
      }
  
      // Create a MutationObserver for future attribute changes
      const observer = new MutationObserver(() => {
        if (submitButton.disabled || submitButton.classList.contains('disabled')) {
          buyNowButton.setAttribute('disabled', 'disabled');
        } else {
          buyNowButton.removeAttribute('disabled');
        }
      });
  
      observer.observe(submitButton, {
        attributes: true,
        attributeFilter: ['disabled', 'class']
      });
    });
  };

observeAllSubmitButtons();
document.addEventListener('DOMContentLoaded', observeAllSubmitButtons);
</script>