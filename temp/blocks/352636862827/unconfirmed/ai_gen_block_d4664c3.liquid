{% doc %}
  @prompt
    Create JavaScript code that scrolls the page to the top of the product grid when a filter is selected on a collection page

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

<div data-filter-scroll-{{ ai_gen_id }} {{ block.shopify_attributes }}></div>

<script>
  (function() {
    class FilterScroll extends HTMLElement {
      constructor() {
        super();
        this.productGrid = null;
        this.filterForm = null;
        this.scrollOffset = {{ block.settings.scroll_offset }};
        this.scrollBehavior = '{{ block.settings.scroll_behavior }}';
        this.scrollDelay = {{ block.settings.scroll_delay }};
      }

      connectedCallback() {
        this.productGrid = document.getElementById('product-grid') || document.querySelector('.collection');
        this.filterForm = document.getElementById('FacetFiltersForm') || document.querySelector('form[action*="/collections/"]');
        
        if (!this.productGrid || !this.filterForm) {
          console.warn('Filter scroll: Could not find product grid or filter form');
          return;
        }
        
        this.setupEventListeners();
      }

      setupEventListeners() {
        // Listen for changes to filter inputs
        const filterInputs = this.filterForm.querySelectorAll('input[type="checkbox"], input[type="radio"], select');
        filterInputs.forEach(input => {
          input.addEventListener('change', this.handleFilterChange.bind(this));
        });

        // Listen for price range changes
        const priceInputs = this.filterForm.querySelectorAll('input[type="number"], input[type="range"]');
        priceInputs.forEach(input => {
          input.addEventListener('change', this.handleFilterChange.bind(this));
        });

        // Listen for filter form submission
        this.filterForm.addEventListener('submit', this.handleFilterChange.bind(this));
        // Listen for URL changes which might indicate filter changes via browser back/forward
        window.addEventListener('popstate', this.handleUrlChange.bind(this));
      }

      handleFilterChange(event) {
        // Don't scroll immediately to allow the filter to apply first
        setTimeout(() => {
          this.scrollToProductGrid();
        }, this.scrollDelay);
      }

      handleUrlChange() {
        // Check if URL contains filter parameters
        if (window.location.search.includes('filter.') || window.location.search.includes('sort_by=')) {
          setTimeout(() => {
            this.scrollToProductGrid();
          }, this.scrollDelay);
        }
      }

      scrollToProductGrid() {
        if (!this.productGrid) return;
        
        const gridRect = this.productGrid.getBoundingClientRect();
        const scrollPosition = window.pageYOffset + gridRect.top - this.scrollOffset;
        
        window.scrollTo({
          top: scrollPosition,
          behavior: this.scrollBehavior
        });
      }
    }

    customElements.define('filter-scroll-{{ ai_gen_id }}', FilterScroll);
  })();
</script>

{% schema %}
{
  "name": "Filter Scroll",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Scroll Settings"
    },
    {
      "type": "range",
      "id": "scroll_offset",
      "min": 0,
      "max": 200,
      "step": 10,
      "unit": "px",
      "label": "Scroll offset",
      "info": "Distance from the top of the viewport to the product grid",
      "default": 80
    },
    {
      "type": "select",
      "id": "scroll_behavior",
      "label": "Scroll behavior",
      "options": [
        {
          "value": "smooth",
          "label": "Smooth"
        },
        {
          "value": "auto",
          "label": "Instant"
        }
      ],
      "default": "smooth"
    },
    {
      "type": "range",
      "id": "scroll_delay",
      "min": 0,
      "max": 1000,
      "step": 50,
      "unit": "ms",
      "label": "Scroll delay",
      "info": "Delay before scrolling to allow filters to apply",
      "default": 300
    }
  ],
  "presets": [
    {
      "name": "Filter Scroll"
    }
  ]
}
{% endschema %}